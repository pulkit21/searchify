c
multi_search.last.capi
multi_search.last
multi_search.last.camalize
multi_search.last
query2
::JsonDataService.new.call.find_all{|e| /#{query1}/ =~ e[:Type] &&  /#{query2}/ =~e[:"Designed by"]}
multi_search
search_query.last
query2search_query.last
query2
query1
n
c
search_query.length
query1
n
c
::JsonDataService.new.call.find_all{|e| /#{query2}/ != e[:Type] &&  /#{query1}/ =~e[:"Designed by"]}
::JsonDataService.new.call.find_all{|e| /#{query1}/ != e[:Type] &&  /#{query2}/ =~e[:"Designed by"]}
::JsonDataService.new.call.find_all{|e| /#{query1}/ =~ e[:Type] &&  /#{query2}/ =~e[:"Designed by"]}
::JsonDataService.new.call.find_all{|e| /#{query1}/ != e[:Type] &&  /#{query2}/ =~e[:"Designed by"]}::JsonDataService.new.call.find_all{|e| /#{query1}/ =~ e[:Type] &&  /#{query2}/ =~e[:"Designed by"]}
::JsonDataService.new.call.find_all{|e| /#{query1}/ != e[:Type] &&  /#{query2}/ =~e[:"Designed by"]}
query2
query1
c
params[:query].split(' -')
params[:query].split('- ')
params[:query].split('-')
c
params[:query].split(' ', 2)
params[:query].split('', 2)
params[:query]
params
search_query
c
search_query.length == 2
search_query.length 
search_query.length > 2
query1, query2 = search_query.first, search_query.last if search_query.length > 2
query1
search_query.first
query1
c
a
a,b = search_query.first, search_query.last
a b = search_query.first; search_query.last
search_query.last
search_query.first
search_query
a b = search_query.first search_query.last
c
a.split.first
a 
a.split.pop a.split.first
a.split - a.split.first
a 
a.split.first
a.split.first.to_a
a.split.first
a - a.split.first
a.split.first
a.split().first
a.split()
a.split
a
a = "Interpreted Thomas Eugene"
params[:query]
params[:query].split()
params[:query].split().length
c
params[:query].split().length
params[:query].split().lenth
params[:query].split()
params[:query]
#{params[:query]
::JsonDataService.new.call.find_all{|e| /#{params[:query]}/ =~ e[:Type] ||  /#{params[:query]}/ =~e[:"Designed by"] || /#{params[:query]}/ =~e[:Name]}
::JsonDataService.new.call.find_all{|e| /#{params[:query]}/ =~ e[:Name] }
::JsonDataService.new.call.find_all{|e| /Lisp/ =~ e[:Name] }
::JsonDataService.new.call.find_all{|e| /params[:query]/ =~ e[:Name] }
::JsonDataService.new.call.find_all{|e| /params[:query]/  }
::JsonDataService.new.call.find_all{|e| /params[:query]/ =~ e[:Name] }
"#{params[:query]}"
::JsonDataService.new.call.find_all{|e| "#{params[:query]}" =~ e[:Name] }
::JsonDataService.new.call.find_all{|e| /"#{params[:query]}"/ =~ e[:Name] }
::JsonDataService.new.call.find_all{|e| /params[:query]/ =~ e[:Name] }
::JsonDataService.new.call.find_all{|e| /params[:query]/ =~ e[:Type] ||  /params[:query]/ =~e[:"Designed by"] || /params[:query]/ =~e[:Name]}
c
params[:query]
params[:query].split( )
::JsonDataService.new.call.find_all{|e| /params[:query]/ =~ e[:Type] ||  /params[:query]/ =~e[:"Designed by"] || /params[:query]/ =~e[:Name]}
::JsonDataService.new.call.find_all{|e| / params[:query]/ =~ e[:Type] ||  /params[:query]/ =~e[:"Designed by"] || /params[:query]/ =~e[:Name]}
params[:query].split( )
c
params[:query].split( )
params[:query].split()
params[:query]
params
c
params
query
params
Interpretedparams
